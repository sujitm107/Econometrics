}
# Print all the MSE's calculate
print(all_errors)
# Print the mean of the errors calculated
print(mean(all_errors))
library(randomForest)
training <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction 4/Earnings_Train2019.csv")
test<- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction 4/Earnings_Test_Students.csv")
tree <- svm(Earnings~Major+newVar, data = training)
#SVM
#install.packages("e1071")
library(e1071)
tree <- svm(Earnings~Major+newVar, data = training)
training$newVar <- data$Number_Of_Professional_Connections*20+data$GPA
tree <- svm(Earnings~Major+newVar, data = training)
test$Earnings<-predict(tree,test)
training$newVar <- training$Number_Of_Professional_Connections*20+training$GPA
test$newVar <- test$Number_Of_Professional_Connections*20+test$GPA
tree <- svm(Earnings~Major+newVar, data = training)
test$Earnings<-predict(tree,test)
submission<-test[,c('ID','Earnings')]
View(submission)
write.csv(submission, "p4submission.csv", row.names = FALSE)
training <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction 4/Earnings_Train2019.csv")
tmp<-training
tmp[,9] <- 0
View(tmp)
tmp[,9] <- as.numeric(training$Major)
View(tmp)
names(training)[9]<-"NewVariable"
training <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction 4/Earnings_Train2019.csv")
test<- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction 4/Earnings_Test_Students.csv")
tmp<-training
tmp[,9] <- as.numeric(training$Major)
names(tmp)[9]<-"NewVariable"
View(tmp)
tmp<-training
tmp[,9] <- as.numeric(training$Major)
names(tmp)[9]<-"NewVariable"
View(tmp)
# Import library
library(e1071)
# Read the data
data <- tmp
# Split ratio of train-test data : 0.75(Train) and 0.25(Test)
split_ratio <- 0.75
# Calculate the size of train data
sample_size <- floor(split_ratio * nrow(data))
#Number of times you want to perform cross_validation
iteration <- 10
# Storing the error at each in a vector
all_errors <- c()
# For loop to compute the cross validation after building a model each time
for (val in c(1:iteration)){
#Splitting the data into training and testing
train_ind <- sample(seq_len(nrow(data)), size = sample_size)
# Train data
train <- data[train_ind, ]
# Test data
test <- data[-train_ind, ]
# NOTE : Create YOUR model on the training data
#        Predict using the predict function
####### IMPORTANT : You need to put YOUR model and the corresponding predict function here #######
####### Format of the model and predict function
# perf.model <- model_function(PERFORMANCE ~ ., data = train)
# pred.model <- predict(perf.model, test)
tree <- svm(Earnings~NewVariable+Number_Of_Professional_Connections, data = train)
pred <- predict(tree,test)
# Find the MSE on the predictions done on the test data with the same model
MSE <- mean((pred-test$Earnings)^2)
# Store all the MSE for each iteration
all_errors <- c(all_errors, MSE)
}
# Print all the MSE's calculate
print(all_errors)
# Print the mean of the errors calculated
print(mean(all_errors))
View(data)
perf.rpart = rpart(Earnings ~ NewVariable, data = data)
pred = predict(perf.rpart, newdata = data)
mean((pred - data$Earnings)^2)
pred = predict(perf.rpart, newdata = test)
install.packages("rpart")
library(rpart)
perf.rpart = rpart(Earnings ~ NewVariable, data = data)
pred = predict(perf.rpart, newdata = data)
mean((pred - data$Earnings)^2)
pred = predict(perf.rpart, newdata = test)
install.packages("rpart")
install.packages("rpart")
library(rpart)
perf.rpart = rpart(Earnings ~ NewVariable, data = data)
pred = predict(perf.rpart, newdata = data)
mean((pred - data$Earnings)^2)
pred = predict(perf.rpart, newdata = test)
#install.packages("rpart")
library(rpart)
perf.rpart = rpart(Earnings ~ Major, data = data)
pred = predict(perf.rpart, newdata = data)
mean((pred - data$Earnings)^2)
pred = predict(perf.rpart, newdata = test)
#START w/ svm
# Import library
library(e1071)
# Read the data
data <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction 4/Earnings_Train2019.csv")
data$newVar <- data$Number_Of_Professional_Connections*20+data$GPA
training$newVar <- training$Number_Of_Professional_Connections*20+training$GPA
test$newVar <- test$Number_Of_Professional_Connections*20+test$GPA
# Split ratio of train-test data : 0.75(Train) and 0.25(Test)
split_ratio <- 0.75
# Calculate the size of train data
sample_size <- floor(split_ratio * nrow(data))
#Number of times you want to perform cross_validation
iteration <- 10
# Storing the error at each in a vector
all_errors <- c()
# For loop to compute the cross validation after building a model each time
for (val in c(1:iteration)){
#Splitting the data into training and testing
train_ind <- sample(seq_len(nrow(data)), size = sample_size)
# Train data
train <- data[train_ind, ]
# Test data
test <- data[-train_ind, ]
# NOTE : Create YOUR model on the training data
#        Predict using the predict function
####### IMPORTANT : You need to put YOUR model and the corresponding predict function here #######
####### Format of the model and predict function
# perf.model <- model_function(PERFORMANCE ~ ., data = train)
# pred.model <- predict(perf.model, test)
tree <- svm(Earnings~Major+newVar, data = train)
pred <- predict(tree,test)
# Find the MSE on the predictions done on the test data with the same model
MSE <- mean((pred-test$Earnings)^2)
# Store all the MSE for each iteration
all_errors <- c(all_errors, MSE)
}
# Print all the MSE's calculate
print(all_errors)
# Print the mean of the errors calculated
print(mean(all_errors))
TotalNumberOfGunIncidents <- read.csv("~/Desktop/College 1st Year/Data 101/Gun Control2/TotalNumberOfGunIncidents.csv")
View(TotalNumberOfGunIncidents)
stats<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Gun Control2/TotalNumberOfGunIncidents.csv")
summary(stats)
MassShootings2019 <- read.csv("~/Desktop/College 1st Year/Data 101/Gun Control2/MassShootings2019.csv")
View(MassShootings2019)
stats<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Gun Control2/MassShootings2019.csv")
summary(stats)
stats<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Gun Control2/MassShootings2019.csv")
NK <- boxplot(stats$X..Injured)
NK
summary(stats)
stats<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Gun Control2/MassShootings2019.csv")
#Install the package first and import it:
install.packages("ggplot2")
#Import the library.
library(ggplot2)
NK <- boxplot(stats$X..Injured)
NK
summary(stats)
stats<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Gun Control2/MassShootings2019.csv")
#Install the package first and import it:
#install.packages("ggplot2")
#Import the library.
library(ggplot2)
NK <- geom_boxplot(stats$X..Injured)
NK
summary(stats)
stats<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Gun Control2/MassShootings2019.csv")
#Install the package first and import it:
#install.packages("ggplot2")
#Import the library.
library(ggplot2)
NK <- geom_boxplot(stats$X..Injured)
NK
summary(stats)
NK <- geom_boxplot(stats$X..Injured)
NK
NK <- geom_boxplot(stats$X..Injured, col = rainbow)
NK <- boxplot(stats$X..Injured, col = rainbow)
NK <- boxplot(stats$X..Injured, col = rainbow)
NK
NK <- boxplot(stats$X..Injured)
NK <- boxplot(stats$X..Injured, main = "Injured per Mass Shooting")
stats<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Gun Control2/MassShootings2019.csv")
#Install the package first and import it:
#install.packages("ggplot2")
#Import the library.
library(ggplot2)
NI <- boxplot(stats$X..Injured, main = "Injured per Mass Shooting")
NI
NK <- boxplot(stats$X..Killed, main = "Injured per Mass Shooting")
NK
summary(stats)
NK <- boxplot(stats$X..Killed, main = "Killed per Mass Shooting")
p <- ggplot(data=stats, aes(x=States, y=frequency, fill=State)) +
geom_bar(stat="identity")
p <- ggplotly(p)
library(plotly)
p <- ggplot(data=stats, aes(x=States, y=frequency, fill=State)) +
geom_bar(stat="identity")
p <- ggplotly(p)
p <- ggplot(data=stats, aes(x=State, y=frequency, fill=State)) +
geom_bar(stat="identity")
p <- ggplotly(p)
p <- ggplot(data=stats, aes(x=State, y=frequency, fill=State)) +
geom_bar(stat="identity")
p <- ggplotly(p)
p <- ggplot(data=stats, aes(x=State, y=frequency, fill=State)) +
geom_bar(stat="identity")
p <- ggplotly(p)
p
p <- ggplot(data=stats, aes(x=State, y=frequency, fill=State)) +
geom_bar(stat="identity")
p <- ggplotly(p)
p
library(ggplot2)
library(plotly)
p <- ggplot(data=stats, aes(x=State, fill=State)) +
geom_bar(stat="identity")
p <- ggplotly(p)
p
bar<-barplot(table(stats$State))
bar
bar<-barplot(table(stats$State), cex = 0.2)
bar<-barplot(table(stats$State), ces = 0.2)
bar<-barplot(table(stats$State), horiz = T)
bar<-barplot(table(stats$State), horiz = T, horiz.names = T)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.2)
bar
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.2, coord_flip())
bar
NI <- boxplot(stats$X..Injured, main = "Injured per Mass Shooting")
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.2, xlab = T)
bar
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.2, xlab = F)
bar
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.2, par(las=2))
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.2, las=2)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, las=2)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, xlas=2)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, x.las=2)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, las=2, col = blue, border = NA)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, las=2, col = "blue", border = NA)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, las=2, col = "lightblue", border = NA)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, las=2, col = "pink", border = NA)
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.75, las=2, col = "pink", border = NA, main = "Mass Shootings per State")
bar<-barplot(table(stats$State), horiz = T, cex.names = 0.5, las=2, col = "pink", border = NA, main = "Mass Shootings per State")
revenue_submission <- read.csv("~/Desktop/College 1st Year/Data 101/Prediction Challenge 5/revenue_submission.csv")
View(revenue_submission)
revenue_submission$Revenue <- predict(perf.rf,test)
perf.rf = randomForest::randomForest(Revenue ~ Duration+Activity+AtimesD+AoverD+DoverA+Source, data = train)
training <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction Challenge 5/P5_train1.csv")
test<-read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Prediction Challenge 5/P5_test1_students.csv")
training$AtimesD <- training$Activity*training$Duration
training$AoverD <- training$Activity/(training$Duration+0.000001)
training$DoverA <- training$Duration/(training$Activity+0.000001)
library(randomForest)
perf.rf = randomForest::randomForest(Revenue ~ Duration+Activity+AtimesD+AoverD+DoverA+Source, data = train)
View(training)
perf.rf = randomForest::randomForest(Revenue ~ Duration+Activity+AtimesD+AoverD+DoverA+Source, data = training)
test$Revenue<-predict(perf.rf,test)
test$AtimesD <- test$Activity*test$Duration
test$AoverD <- test$Activity/(test$Duration+0.000001)
test$DoverA <- test$Duration/(test$Activity+0.000001)
test$Revenue<-predict(perf.rf,test)
revenue_submission$Revenue <- predict(perf.rf,test)
submission<-test[,c('ID','Revenue')]
View(submission)
write.csv(submission, "p5submission.csv", row.names = FALSE)
MOODY.2019 <- read.csv("~/Desktop/College 1st Year/Data 101/Final playground/MOODY-2019.csv")
View(MOODY.2019)
moody <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Final playground/MOODY-2019.csv")
summary(moody)
sub_df <- subset(moody_df, select = c(STUDENTID, GRADE))
moody <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Final playground/MOODY-2019.csv")
summary(moody)
sub_df <- subset(moody, select = c(STUDENTID, GRADE))
View(sub_df)
sub_df <- subset(moody, SCORE > 80, select = c(PARTICIPATION, GRADE))
moody <- read.csv("/Users/sujitmolleti/Desktop/College 1st Year/Data 101/Final playground/MOODY-2019.csv")
summary(moody)
sub_df <- subset(moody, SCORE > 80, select = c(STUDENTID, GRADE))
View(sub_df)
moody[,8] <- ""
moody[moody$GRADE=="F",8]<-"fail"
colnames(moody)[8] <- "pass or not"
moody[moody$SCORE >= 90,8]<-"excellent"
View(moody)
moody[moody$GRADE != "F",8] <- "not fail"
View(moody)
moody[moody$SCORE >= 90,8]<-"excellent"
View(moody)
firstName <- c("Ethan", "Captian")
lastName <- c("Hunt", "Mary")
gender <- c("MALE", "FEMALE")
score <- c(16, 91)
rowNames <- c("first Row", "Second row")
stu_df <- data.frame(firstName, lastName, gender, score, rowNames)
stu_df <- stu_df[1:2, c("sex", "score")]
stu_df
firstName <- c("Ethan", "Captian")
lastName <- c("Hunt", "Mary")
gender <- c("MALE", "FEMALE")
score <- c(16, 91)
rowNames <- c("first Row", "Second row")
stu_df <- data.frame(firstName, lastName, gender, score, rowNames)
stu_df <- stu_df[1:2, c("sex", "score")]
stu_df <- stu_df[1:2, c("gender", "score")]
stu_df
myMat <- matrix(c(1,2,3 11,12,13))
myMat <- matrix(c(1,2,3, 11,12,13))
myMat
myMat <- matrix(c(1,2,3)(11,12,13))
ranNum <- sample(1:10, 5, replace = TRUE)
ranNum
ranNum
ranNum <- sample(1:10, 5, replace = TRUE)
ranNum
#16
par(mfrow=c(2,1))
plot(moody$GRADE,moody$ON_SMARTPHONE)
plot(moody$GRADE,moody$SCORE)
#17
par(mfrow=c(2,2))
#generate a graph which has 2 rows and 2 columns
plot(moody$GRADE,moody$ON_SMARTPHONE)
plot(moody$GRADE,moody$SCORE)
plot(moody$SCORE,moody$FINALEXAM)
plot(moody$ON_SMARTPHONE,moody$ASKS_QUESTIONS)
#18
tree <- rpart(GRADE ~ SCORE+ON_SMARTPHONE+ASKS_QUESTIONS+LEAVES_EARLY+LATE_IN_CLASS+FINALEXAM,data=moody,control=rpart.control(minbucket =100))
#18
library(rpart)
tree <- rpart(GRADE ~ SCORE+ON_SMARTPHONE+ASKS_QUESTIONS+LEAVES_EARLY+LATE_IN_CLASS+FINALEXAM,data=moody,control=rpart.control(minbucket =100))
tree <- rpart(GRADE ~ SCORE+ON_SMARTPHONE+ASKS_QUESTIONS+LEAVES_EARLY+LATE_IN_CLASS,data=moody,control=rpart.control(minbucket =100))
tree
#generate a graph which has 2 rows and 2 columns
plot(moody$GRADE,moody$ON_SMARTPHONE)
plot(moody$GRADE,moody$SCORE)
plot(moody$SCORE,moody$FINALEXAM)
plot(moody$ON_SMARTPHONE,moody$ASKS_QUESTIONS)
#generate a graph which has 2 rows and 2 columns
plot(moody$GRADE,moody$ON_SMARTPHONE)
plot(moody$GRADE,moody$SCORE)
plot(moody$SCORE,moody$FINALEXAM)
plot(moody$ON_SMARTPHONE,moody$ASKS_QUESTIONS)
#17
par(mfrow=c(2,2))
#generate a graph which has 2 rows and 2 columns
plot(moody$GRADE,moody$ON_SMARTPHONE)
plot(moody$GRADE,moody$SCORE)
plot(moody$SCORE,moody$FINALEXAM)
plot(moody$ON_SMARTPHONE,moody$ASKS_QUESTIONS)
#generate a graph which has 2 rows and 2 columns
plot(moody$GRADE,moody$ON_SMARTPHONE)
plot(moody$GRADE,moody$SCORE)
plot(moody$SCORE,moody$FINALEXAM)
plot(moody$ON_SMARTPHONE,moody$ASKS_QUESTIONS)
summary(data)
data <- read.csv("/Users/sujitmolleti/Desktop/Kaggle/titanic/train.csv")
summary(data)
plot(data$Age)
library(rpart)
training <- read.csv("/Users/sujitmolleti/Documents/College 1st Year/Semester 2/Data 101/Prediction 2/M2019btrain copy.csv")
summary(training)
data <- read.csv("/Users/sujitmolleti/Desktop/Coding/HACKRU/hack_ru.csv")
summary(data)
china <- subset(data, "China")
china <- subset(data, country=="China")
summary(china)
data <- read.csv("/Users/sujitmolleti/Desktop/Coding/HACKRU/hack_ru.csv")
summary(data)
china <- subset(data, country=="USA")
summary(china)
summary(china)
print(4+2)
data <- read.csv("/Users/sujitmolleti/Desktop/Coding/HACKRU/hack_ru.csv")
summary(data)
data <- read.csv("/Users/sujitmolleti/Desktop/Coding/HACKRU/hack_ru.csv")
china <- subset(data, country=="Vietnam")
summary(china)
BMI <- data.frame(
gender = c("Male", "Male", "Female"),
height = c(152, 171.5, 165),
Age = c(42, 38, 26)
)
print(BMI)
BMI <- data.frame(
gender <- c("Male", "Male", "Female"),
height <- c(152, 171.5, 165),
Age <- c(42, 38, 26)
)
print(BMI)
BMI <- data.frame(
gender = c("Male", "Male", "Female"),
height = c(152, 171.5, 165),
Age = c(42, 38, 26)
)
print(BMI)
for(i in gender){
print(i)
}
break;
for(i in gender){
if(i == 2){
break;
}
print(i)
}
for(i in gender){
if(i == "Male"){
break;
}
print(i)
}
setwd("~/Google Drive (ssm189@scarletmail.rutgers.edu)/Spring Semester 2020/Econometrics")
#1st regression
reg<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height, data=data)
data <- read.csv("NJHealth1000.csv", head=T, sep=",")
summary(data)
#basic commands to get overview of the dataset
str(data) #summarize dataset (look at this along with codebook)
summary(data) # summary of all the variables
names(data)  # what variables are included  (look at this along with codebook)
#declaring new variables
data$agesq = data$age * data$age
data$sex.f = factor(data$sex)
#turning off scientific notation
options(scipen  = 999)
#1st regression
reg<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height, data=data)
summary(reg)
library(zoo)
library(lmtest)
library(sandwich)
# redo the second regression but with heteroskedasticty robust standard errors
coeftest(reg, vcov=vcovHC(reg))
#3e
reg3e<-lm(weight ~ agesq + sex.f + lowincome + middleincome + married + height, data=data)
summary(reg3e)
coeftest(rege3, vcov=vcovHC(reg3e))
summary(reg3e)
coeftest(reg3e, vcov=vcovHC(reg3e))
#adding education and weight
reg2<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height + educ + race, data=data)
coeftest(reg2, vcov=vcovHC(reg2))
#now we want to test some joint hypotheses. Need package "car"
# in order to use linearHypothesis command
#install.packages("car")
library(car)
detach("package:carData", unload=TRUE)
library("carData", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
#now we want to test some joint hypotheses. Need package "car"
# in order to use linearHypothesis command
#install.packages("car")
library(car)
# test joint hypothesis that coef on weight AND coef on cyl both =0
linearHypothesis(model, c("weight=0", "race=0"))
#run a regression of mpg on wt (weight), hp (horsepower), and cyl (# cylinders)
model<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height + educ + race, data=data)
#now we want to test some joint hypotheses. Need package "car"
# in order to use linearHypothesis command
#install.packages("car")
library(car)
# test joint hypothesis that coef on weight AND coef on cyl both =0
linearHypothesis(model, c("weight=0", "race=0"))
# test joint hypothesis that coef on hp = coef on wt
linearHypothesis(model,c("weight=race"))
# test joint hypothesis that coef on weight AND coef on cyl both =0
linearHypothesis(model, c("education=0", "race=0"))
# test joint hypothesis that coef on hp = coef on wt
linearHypothesis(model,c("education=race"))
#run a regression of mpg on wt (weight), hp (horsepower), and cyl (# cylinders)
model<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height + educ + race, data=data)
#now we want to test some joint hypotheses. Need package "car"
# in order to use linearHypothesis command
#install.packages("car")
library(car)
# test joint hypothesis that coef on weight AND coef on cyl both =0
linearHypothesis(model, c("education=0", "race=0"))
# test joint hypothesis that coef on hp = coef on wt
linearHypothesis(model,c("education=race"))
#run a regression of mpg on wt (weight), hp (horsepower), and cyl (# cylinders)
model<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height + educ + race, data=data)
#now we want to test some joint hypotheses. Need package "car"
# in order to use linearHypothesis command
#install.packages("car")
library(car)
# test joint hypothesis that coef on weight AND coef on cyl both =0
linearHypothesis(model, c("middleincome=0", "highincome=0"))
# test joint hypothesis that coef on hp = coef on wt
linearHypothesis(model,c("middleincome=highincome"))
#adding education and race
reg2<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height + educ + race, data=data)
coeftest(reg2, vcov=vcovHC(reg2))
summary(reg2)
#adding education and race
reg2<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + height + educ + race, data=data)
coeftest(reg2, vcov=vcovHC(reg2))
summary(reg2)
#without height
reg3<-lm(weight ~ agesq + sex.f + middleincome + highincome + married + educ + race, data=data)
coeftest(reg3, vcov=vcovHC(reg3))
data<-read.csv('birthweight.csv', head=T, sep=",")
#summary(data)
data2 <- data[data$smoke!=9,]
smokerMean <- mean(data2$bwt[data2$smoke == 1])
smokerMean
non_smokerMean <- mean(data2$bwt[data2$smoke == 0])
